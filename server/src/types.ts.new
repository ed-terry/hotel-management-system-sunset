import { Room, Booking, Report } from './entities';
import { GraphQLResolveInfo } from 'graphql';
import { IResolvers } from '@graphql-tools/utils';

export interface RevenueStats {
    totalRevenue: number;
    averageDaily: number;
    monthlyBreakdown: { month: string; revenue: number }[];
}

export interface RoomInput {
    number: string;
    type: string;
    status: string;
    price: number;
}

export interface BookingInput {
    roomId: string;
    guestName: string;
    checkIn: string;
    checkOut: string;
    status: string;
}

export interface ReportInput {
    title: string;
    type: string;
    data: any;
    summary: string;
}

export interface GenerateReportInput extends ReportInput {
    period?: string;
}

export interface ScheduleReportInput extends ReportInput {
    schedule: string;
    recipients: string[];
}

export type Context = any;

interface BaseResolver<TResult, TParent = any, TContext = any, TArgs = any> {
    (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

interface QueryResolvers {
    rooms: BaseResolver<Room[], any, Context, {}>;
    room: BaseResolver<Room | null, any, Context, { id: string }>;
    bookings: BaseResolver<Booking[], any, Context, {}>;
    booking: BaseResolver<Booking | null, any, Context, { id: string }>;
    reports: BaseResolver<Report[], any, Context, {}>;
    report: BaseResolver<Report | null, any, Context, { id: string }>;
    revenueStats: BaseResolver<RevenueStats, any, Context, { year: number }>;
}

interface MutationResolvers {
    createRoom: BaseResolver<Room, any, Context, { input: RoomInput }>;
    updateRoom: BaseResolver<Room | null, any, Context, { id: string; input: Partial<RoomInput> }>;
    deleteRoom: BaseResolver<boolean, any, Context, { id: string }>;
    createBooking: BaseResolver<Booking, any, Context, { input: BookingInput }>;
    updateBooking: BaseResolver<Booking | null, any, Context, { id: string; input: Partial<BookingInput> }>;
    deleteBooking: BaseResolver<boolean, any, Context, { id: string }>;
    cancelBooking: BaseResolver<boolean, any, Context, { id: string }>;
    createReport: BaseResolver<Report, any, Context, { input: ReportInput }>;
    generateReport: BaseResolver<Report, any, Context, { input: GenerateReportInput }>;
    scheduleReport: BaseResolver<Report, any, Context, { input: ScheduleReportInput }>;
}

export interface Resolvers extends IResolvers {
    Query: QueryResolvers;
    Mutation: MutationResolvers;
    JSON: GraphQLScalarType;
}
